import typing as t
from .validators import *
from abc import ABC, abstractmethod

from helpers import flash_error, to_snake_case, dict_to_snake_case, to_user_friendly


"""
Form validation module.

Seems like some enhancements in metaprogramming are needed.
"""


class Field(ABC):
    def __init__(self, field_name, value=None):
        self._field_name = to_snake_case(field_name)
        self._field_value = value
        if callable(self.is_valid):  # make sure, that `is_valid` is decorated with @property
            raise TypeError("`is_valid` has to be a property method")
        if callable(self.validation_requirements):
            raise TypeError("`validation_requirements` has to be a property method")

    def __getattr__(self, name: str) -> t.Optional["Field"]:
        if name == self._field_name:
            return self._field_value
        return None

    def __eq__(self, obj: object) -> bool:
        if self is obj:
            return True
        if not isinstance(obj, Field):
            return False
        return self._field_value == obj._field_value

    def __ne__(self, obj: object) -> bool:
        return not self == obj

    @property
    def validation_requirements(self) -> str:
        return ""

    @property
    @abstractmethod
    def is_valid(self) -> bool:
        pass


class FormMeta(type):
    def __init__(self, *_):
        self._field_types = {}
        for field_name, field_type in self.__dict__.items():
            if isinstance(field_type, type) and issubclass(field_type, Field):
                self._field_types[field_name] = field_type
                setattr(self, field_name, field_type)


class Form(metaclass=FormMeta):
    def __init__(self, fields_dict: t.Dict[str, t.Any] = {}):
        self._fields = {}
        fields_dict = dict_to_snake_case(fields_dict)
        for field_name, field_type in self.__class__._field_types.items():
            field_value = fields_dict.get(field_name, None)
            self._fields[field_name] = field_type(field_value)

    def __setattr__(self, name, value):
        if name[0] == "_":
            super().__setattr__(name, value)
        if name in self._fields:
            self._fields[name]._field_value = value
        else:
            super().__setattr__(name, value)

    def _on_none_field(self, field_name: str, _: Field) -> None:
        flash_error(f"{to_user_friendly(field_name)} is required.")

    def _on_invalid_field(self, field_name: str, field: Field) -> None:
        flash_error(
            f"{to_user_friendly(field_name)} is invalid. {field.validation_requirements}"
        )

    @property
    def is_valid(self):
        is_valid = True
        field: Field
        for field_name, field in self._fields.items():
            if not field._field_value:
                self._on_none_field(field_name, field)
                is_valid = False
            elif not field.is_valid:
                self._on_invalid_field(field_name, field)
                is_valid = False

        return is_valid


class EmailField(Field):
    def __init__(self, value=None):
        super().__init__("email", value)

    def value(self) -> t.Optional[str]:
        return self._field_value

    @property
    def validation_requirements(self) -> str:
        return EMAIL_REQUIREMENTS

    @property
    def is_valid(self):
        return email_is_valid(self.email)  # type: ignore


class PasswordField(Field):
    def __init__(self, value=None):
        super().__init__("password", value)

    def value(self) -> t.Optional[bytes]:
        return self._field_value

    @property
    def validation_requirements(self) -> str:
        return PASSWORD_REQUIREMENTS

    @property
    def is_valid(self):
        return password_is_valid(self.password)  # type: ignore


class UserTypeField(Field):
    def __init__(self, value=None):
        super().__init__("user_type", value)

    def value(self) -> t.Optional[UserType]:
        return self._field_value

    @property
    def validation_requirements(self) -> str:
        user_type_values = (
            UserType.ADMIN.value,
            UserType.CASHIER.value,
            UserType.CUSTOMER.value,
        )
        return f"User type has to be one of {{{user_type_values}}}"

    @property
    def is_valid(self) -> bool:
        return user_type_is_valid(self.user_type)  # type: ignore


class UsernameField(Field):
    def __init__(self, value=None):
        super().__init__("username", value)

    def value(self) -> t.Optional[str]:
        return self._field_value

    @property
    def validation_requirements(self) -> str:
        return USERNAME_REQUIREMENTS

    @property
    def is_valid(self) -> bool:
        return username_is_valid(self.username)  # type: ignore


class RegisterForm(Form):
    user_type = UserTypeField
    email = EmailField
    username = UsernameField
    password = PasswordField
    repeat_password = PasswordField

    @property
    def is_valid(self) -> bool:
        is_valid = super().is_valid
        if self.password != self.repeat_password:
            flash_error("Passwords do not match")
            is_valid = False
        return is_valid


class LoginForm(Form):
    email = EmailField
    password = PasswordField
